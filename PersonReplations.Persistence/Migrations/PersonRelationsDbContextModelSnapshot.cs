// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonReplations.Persistence;

#nullable disable

namespace PersonReplations.Persistence.Migrations
{
    [DbContext(typeof(PersonRelationsDbContext))]
    partial class PersonRelationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonReplations.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 11, 13, 31, 53, 872, DateTimeKind.Local).AddTicks(6856));

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 11, 13, 31, 53, 872, DateTimeKind.Local).AddTicks(7953));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("PersonalId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.PersonRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 11, 13, 31, 53, 872, DateTimeKind.Local).AddTicks(9542));

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelationId");

                    b.ToTable("PersonRelations");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 11, 13, 31, 53, 873, DateTimeKind.Local).AddTicks(1763));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ReferenceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("References");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ქალი",
                            ReferenceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "კაცი",
                            ReferenceTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "მობილური",
                            ReferenceTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ოფისი",
                            ReferenceTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "სახლი",
                            ReferenceTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "კოლეგა",
                            ReferenceTypeId = 4
                        },
                        new
                        {
                            Id = 7,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ნაცნობი",
                            ReferenceTypeId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ნათესავი",
                            ReferenceTypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "სხვა",
                            ReferenceTypeId = 4
                        },
                        new
                        {
                            Id = 10,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "თბილისი",
                            ReferenceTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "პრაღა",
                            ReferenceTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "პარიზი",
                            ReferenceTypeId = 2
                        });
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 11, 13, 31, 53, 873, DateTimeKind.Local).AddTicks(2553));

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Contact", b =>
                {
                    b.HasOne("PersonReplations.Domain.Entities.Reference", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonReplations.Domain.Entities.Person", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId");

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Person", b =>
                {
                    b.HasOne("PersonReplations.Domain.Entities.Reference", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.PersonRelation", b =>
                {
                    b.HasOne("PersonReplations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonReplations.Domain.Entities.Relation", "Relation")
                        .WithMany("PersonRelations")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Relation", b =>
                {
                    b.HasOne("PersonReplations.Domain.Entities.Reference", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Person", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("PersonReplations.Domain.Entities.Relation", b =>
                {
                    b.Navigation("PersonRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
